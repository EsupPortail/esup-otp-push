class MigrationManager {
  constructor() {
    this.sharedPreferences =
      window.plugins.SharedPreferences.getInstance("settings");
    this.migrationKey = "isMigrationDone"; // Flag de migration
    this.initializationKey = "isInitialized"; // Flag pour v√©rifier si l'initialisation a √©t√© faite
  }

  /**
   * V√©rifie si l'application a d√©j√† √©t√© initialis√©e
   */
  async isAppInitialized() {
    const initialized = localStorage.getItem(this.initializationKey);

    if (initialized !== null) {
      return true; // L'application a d√©j√† √©t√© initialis√©e
    }

    // V√©rifie si d'anciennes donn√©es existent
    const hasOldData =
      localStorage.getItem("darkMode") !== null ||
      localStorage.getItem("totpObjects") !== null ||
      localStorage.getItem("otpServers") !== null;

    if (hasOldData) {
      console.warn(
        "‚ö†Ô∏è Anciennes donn√©es d√©tect√©es, mais initializationKey absent. Mise √† jour n√©cessaire."
      );

      // ‚úÖ Initialiser initializationKey pour √©viter de refaire cette v√©rification
      localStorage.setItem(this.initializationKey, true);
      console.log("üîÑ Mise √† jour : initializationKey ajout√© ‚úÖ");

      return true; // On suppose que l'app √©tait d√©j√† install√©e
    }

    return false; // C'est une premi√®re installation
  }

  /**
   * Initialise les valeurs par d√©faut si l'application est install√©e pour la premi√®re fois
   */
  async initializeApp() {
    if (await this.isAppInitialized()) {
      console.log("‚úÖ L'application est d√©j√† initialis√©e.");
      return;
    }

    console.log(
      "üÜï Premi√®re installation d√©tect√©e, initialisation des valeurs..."
    );

    await this.setSharedPreference("darkMode", ""); // Mode sombre d√©sactiv√© par d√©faut
    const darkMode = window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "enabled"
      : "disabled";
    localStorage.setItem("darkMode", darkMode);
    await this.setSharedPreference("totpObjects", JSON.parse("{}")); // Objet vide pour les TOTP
    localStorage.setItem("totpObjects", JSON.stringify({}));
    await this.setSharedPreference("otpServers", JSON.parse("{}")); // Objet vide pour les OTP Servers
    localStorage.setItem("otpServers", JSON.stringify({}));
    await this.setSharedPreference("establishments", JSON.parse("[]")); // Tableau vide pour les √©tablissements
    localStorage.setItem("establishments", JSON.stringify([]));
    await this.setSharedPreference("gcm_id", ""); // Cl√© vide
    localStorage.setItem("gcm_id", "");
    localStorage.setItem(this.initializationKey, true); // Marquer l'initialisation comme faite

    console.log("üéâ Initialisation termin√©e avec succ√®s !");
  }

  /**
   * V√©rifie si la migration est d√©j√† effectu√©e
   */
  async isMigrationAlreadyDone() {
    const done = localStorage.getItem(this.migrationKey);
    return done; // Convertir en bool√©en
  }

  /**
   * D√©marre la migration si n√©cessaire
   */
  async startMigration() {
    console.log("üîÑ V√©rification de la n√©cessit√© de migrer les donn√©es...");

    if (await this.isMigrationAlreadyDone()) {
      console.log("‚úÖ Migration d√©j√† effectu√©e, rien √† faire.");
      return;
    }

    console.log("üìÇ D√©but de la migration...");
    const establishments = [];

    for (let i = 0; i < localStorage.length; i++) {
      let key = localStorage.key(i);
      let value = localStorage.getItem(key);

      if (!key || value === null) continue;

      try {
        // V√©rifier si c'est un JSON
        if (
          value.startsWith("{") ||
          value.startsWith("[") ||
          key === "darkMode"
        ) {
          value = JSON.parse(value);
        }

        if (key.startsWith("establishment_")) {
          establishments.push(value);
        } else {
          await this.setSharedPreference(key, value);
        }
      } catch (err) {
        console.error(`‚ùå Erreur de parsing JSON pour ${key}:`, err);
      }
    }

    // Stocker les √©tablissements sous forme de tableau
    await this.setSharedPreference("establishments", establishments);
    console.log("‚úÖ Migration des √©tablissements r√©ussie :", establishments);

    // Marquer la migration comme termin√©e
    localStorage.setItem(this.migrationKey, true);
    console.log("üéâ Migration termin√©e avec succ√®s !");
  }

  /**
   * R√©cup√©rer une valeur depuis SharedPreferences
   */
  getSharedPreference(key) {
    return new Promise((resolve) => {
      this.sharedPreferences.get(
        key,
        (value) => {
          try {
            // V√©rifie si la valeur est un JSON et parse automatiquement
            if (typeof value === "object") {
              value = JSON.parse(value);
            }
            resolve(value ?? null); // Retourne `null` si la cl√© est absente
          } catch (error) {
            console.error(`‚ùå Erreur de parsing JSON pour ${key}:`, error);
            resolve(null); // Retourne null au lieu de bloquer avec une erreur
          }
        },
        (error) => {
          console.error(
            `‚ö†Ô∏è - MigrationManager - Erreur lors de la r√©cup√©ration de ${key}:`,
            error
          );
          resolve(null);
        }
      );
    });
  }

  /**
   * Stocker une valeur dans SharedPreferences
   */
  setSharedPreference(key, value, successCallback, errorCallback) {
    return new Promise((resolve, reject) => {
      try {
        value = JSON.stringify(value);

        this.sharedPreferences.put(
          key,
          value,
          () => {
            console.log(`‚úÖ Enregistr√©: ${key} ->`, value);
            if (typeof successCallback === "function") successCallback();
            resolve(true);
          },
          (error) => {
            console.error(
              `‚ùå Erreur lors de l'enregistrement de ${key}:`,
              error
            );
            if (typeof errorCallback === "function") errorCallback(error);
            reject(error);
          }
        );
      } catch (error) {
        console.error(
          `‚ö†Ô∏è - MigrationManager - Erreur interne lors du stockage de ${key}:`,
          error
        );
        reject(error);
      }
    });
  }

  /*
   * Afficher les √©l√©ments migr√©s dans sharedPreferences
   * darkMode, establishments, gcm_id, totpObjects, otpServers
   */
  showSharedPreferences() {
    console.log("üîé Liste des cl√©s et valeurs dans sharedPreferences :");
    this.sharedPreferences.keys(async () => {
      const keysToCheck = [
        "darkMode",
        "establishments",
        "gcm_id",
        "totpObjects",
        "otpServers",
      ];
      for (let key of keysToCheck) {
        let value = await this.getSharedPreference(key);
        console.log(key + " : " + value);
      }
    });
  }

  /**
   * V√©rifie si la classe est bien instanci√©e
   */
  hello() {
    console.log("üëã Bonjour MigrationManager !");
  }
}

window.MigrationManager = MigrationManager;
